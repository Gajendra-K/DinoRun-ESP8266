#include <Adafruit_GFX.h>     // Core graphics library
#include <Adafruit_ST7735.h>  // Hardware-specific library for ST7735
#include <SPI.h>

#define TFT_CS D1   // PyBadge/PyGamer display control pins: chip select
#define TFT_RST D0  // Display reset
#define TFT_DC D2   // Display data/command select

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);



/*------------------------------
||      GLOBAL  SPRITES       ||
-------------------------------*/



const uint8_t dino_rest[] = { 0x0, 0x0, 0x0, 0x0, 0xF, 0xF0, 0x0, 0x1B, 0xF8, 0x0, 0x1F, 0xF8, 0x0, 0x1F, 0xF8, 0x0, 0x1F, 0xF8, 0x0, 0x1F, 0x0, 0x0, 0x1F, 0xE0, 0x40, 0x3E, 0x0, 0x40, 0xFE, 0x0, 0x61, 0xFF, 0x80, 0x73, 0xFE, 0x80, 0x7F, 0xFE, 0x0, 0x7F, 0xFE, 0x0, 0x3F, 0xFC, 0x0, 0xF, 0xF8, 0x0, 0x7, 0xF0, 0x0, 0x3, 0xB0, 0x0, 0x3, 0x10, 0x0, 0x2, 0x10, 0x0, 0x3, 0x18, 0x0, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0 }w=22  h=23
const uint8_t track0[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x0, 0x10, 0x0, 0x0, 0x0, 0x40, 0x20, 0x0, 0x0, 0x20, 0x0, 0x0, 0xC1, 0x0, 0x0, 0xC0, 0x10, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0xC0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0 };  // w=300  h=6
const uint8_t dino[] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF, 0xF0, 0x0, 0x1B, 0xF8, 0x0, 0x1F, 0xF8, 0x0, 0x1F, 0xF8, 0x0, 0x1F, 0xF8, 0x0, 0x1F, 0x0, 0x0, 0x1F, 0xE0, 0x40, 0x3E, 0x0, 0x40, 0xFE, 0x0, 0x61, 0xFF, 0x80, 0x7F, 0xFE, 0x80, 0x7F, 0xFE, 0x0, 0x7F, 0xFE, 0x0, 0x1F, 0xFC, 0x0, 0xF, 0xF8, 0x0, 0x7, 0xF0, 0x0, 0x3, 0xB0, 0x0, 0x3, 0x10, 0x0, 0x3, 0x10, 0x0, 0x3, 0x18, 0x0, 0x3, 0x18, 0x0 }w=22  h=23
const uint8_t bcactus0[] = { 0x6, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x60, 0x6F, 0x70, 0xEF, 0x70, 0xEF, 0x70, 0xEF, 0x70, 0xEF, 0x70, 0xEF, 0x70, 0xEF, 0x70, 0xFF, 0xF0, 0xFF, 0xE0, 0x7F, 0xC0, 0x3F, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x0, 0xF, 0x40, 0x3F, 0x0, 0x1, 0x0 }w=12  h=25



/*------------------------------
||      GLOBAL  DECLARATIONS  ||
-------------------------------*/


constexpr float pi = 3.1415926;
uint8_t dinoX;
uint8_t dinoY;
uint8_t dinoBaseY;  // dino's Y cant be greater than this


constexpr float GRAVITY = 0.3f;
float dinoVelY = 5.2f;
float dinoVelX = 2.5f;


#define JMP_BTN D3
#define REFERENCE_LEVEL 26




void setup(void) {
  pinMode(JMP_BTN, INPUT);

  tft.initR(INITR_BLACKTAB);
  tft.setRotation(1);


  const int W = tft.width();
  const int H = tft.height();

  clear();
  dinoBaseY = dinoY = H - REFERENCE_LEVEL - 23 + 6;  // at middel of track

  // idle
  uint8_t counter = 0;
  while (++counter) {
    if (counter >= 95) {
      // (13,2) 2px 2px
      tft.fillRect(13 + dinoX, 2 + dinoY, 1, 1, 0xFFFF);
    } else {
      // (13,2) 2px 2px
      tft.fillRect(13 + dinoX, 2 + dinoY, 1, 1, 0x0);
    }
    tft.drawBitmap(dinoX, dinoY, (uint8_t*)dino_rest, 22, 23, 0xFFFF);
    counter %= 101;
    int press = digitalRead(JMP_BTN);
    if (press == LOW) break;
    delay(10);
  }

  // during game start  the dino jumps and dino lands and moves little forward

  // start jump animation


  dinoJmp();
  clear();
  unsigned long then = millis();

  while (true) {
    unsigned long now = millis();
    float dt = (now - then) / 10.0f;
    then = now;
    // tft.fillRect(dinoX, dinoY, 22, 23, 0);
    updateDino(dt);
    if (dinoY > dinoBaseY) break;


    tft.drawBitmap(0, H - REFERENCE_LEVEL, (uint8_t*)track0, 300, 6, 0xFFFF);
    tft.drawBitmap(22, H - REFERENCE_LEVEL - 25 + 6, (uint8_t*)bcactus0, 12, 25, 0xFFFF);
    tft.drawBitmap(dinoX, dinoY, (uint8_t*)dino, 22, 23, 0xFFFF);
    delay(10);
  }


  // clear();
  dinoY = dinoBaseY;

  tft.drawBitmap(0, H - REFERENCE_LEVEL, (uint8_t*)track0, 300, 6, 0xFFFF);
  tft.drawBitmap(22, H - REFERENCE_LEVEL - 25 + 6, (uint8_t*)bcactus0, 12, 25, 0xFFFF);
  tft.drawBitmap(dinoX, dinoY, (uint8_t*)dino, 22, 23, 0xFFFF);
}
void loop() {
}



/*------------------------------
||      FUNCTION DEFINATIONS  ||
-------------------------------*/

void dinoJmp() {
  dinoVelY = -5.2f;
}

void updateDino(float dt) {
  dinoVelY += GRAVITY * dt;
  dinoY += dinoVelY * dt;  // s=v*dt
  dinoX += dinoVelX * dt;  // TODO : remove this later as everything will be scrolling in reverse
}


void clear() {
  tft.fillScreen(0);
}